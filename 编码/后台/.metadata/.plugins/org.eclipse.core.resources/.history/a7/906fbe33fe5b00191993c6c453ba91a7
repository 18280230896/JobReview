package test;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Method;

import javax.tools.DiagnosticCollector;
import javax.tools.JavaCompiler;
import javax.tools.JavaFileObject;
import javax.tools.StandardJavaFileManager;
import javax.tools.ToolProvider;


public class Test {
	public static void main(String[] args) {
		File[] files = new File[]{new File("C:\\Users\\asus\\Desktop\\新建文件夹 (2)\\Test.java")};
		JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
		StandardJavaFileManager fileManager = compiler.getStandardFileManager(null, null, null);
		Iterable<? extends JavaFileObject> javaFileObjects = fileManager.getJavaFileObjects(files);
		DiagnosticCollector diagnostics = new DiagnosticCollector();
		boolean success = compiler.getTask(null, fileManager, diagnostics, null, null, javaFileObjects).call();
		if(!success){
			System.out.println(diagnostics.getDiagnostics());
			return;
		}
		ByteArrayOutputStream bos = new ByteArrayOutputStream();
		PrintStream out = System.out;
		PrintStream err = System.err;
		PrintStream exePrintStream = new PrintStream(bos, true);
		System.setOut(exePrintStream);
		System.setErr(exePrintStream);
		try {
			String className = parseClassName(getFileContent(new File("C:\\Users\\asus\\Desktop\\新建文件夹 (2)\\Test.java")));
			Class c = Class.forName(className,true, new MyClassLoad());
			Method main = c.getMethod("main", String[].class);
			main.invoke(null, (Object)null);
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			exePrintStream.close();
			System.setOut(out);
			System.setErr(err);
		}
		System.out.println(new String(bos.toByteArray()));
	}
	
	private static String parseClassName(String content) {
		String packageName = "";
		String className = null;
		int packageStart = content.indexOf("package");
		int packageEnd = content.indexOf(";", packageStart);
		if (packageStart >= 0 && packageEnd > 0) { // package name
			packageStart += "package".length();
			packageName = content.substring(packageStart, packageEnd).replace('\t', ' ').trim() + ".";
		}
 
		int classStart = content.indexOf("class");
		int classEnd = content.indexOf("{", classStart);
		if (classStart >= 0 && classEnd > 0) { // class name
			classStart += "class".length();
			className = content.substring(classStart, classEnd).replace('\t', ' ').trim();
		}
 
		return packageName + className;
	}
	
	public static String getFileContent(File file){
		ByteArrayOutputStream out = null;
		FileInputStream in = null;
		String content = null;
		try {
			out = new ByteArrayOutputStream();
			in = new FileInputStream(file);
			byte[] b = new byte[1024];
			int i;
			while((i = in.read(b)) != -1){
				out.write(b, 0, b.length);
			}
			content = out.toString("UTF-8");
		} catch (Exception e) {
			e.printStackTrace();
		}finally {
			try {
				if(in != null)
					in.close();
				if(out != null)
					out.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return content;
	}


}
