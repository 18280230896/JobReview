package com.llg.util;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.nio.ByteBuffer;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.WritableByteChannel;

public class MyClassLoad extends ClassLoader{

	private File file;
	public MyClassLoad(File file) {
		super();
		this.file = file;
	}
	
	@Override
	protected Class<?> findClass(String name) throws ClassNotFoundException {
		Class<?> clazz = null;
		try {
			byte[] fileByte = getClassFileBytes(file);
			 clazz = defineClass(name, fileByte, 0, fileByte.length);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return clazz;
	}

	private byte[] getClassFileBytes(File file) throws Exception {
        //≤…”√NIO∂¡»°
        FileInputStream fis = new FileInputStream(file);
        FileChannel fileC = fis.getChannel();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        WritableByteChannel outC = Channels.newChannel(baos);
        ByteBuffer buffer = ByteBuffer.allocateDirect(1024);
        while (true) {
            int i = fileC.read(buffer);
            if (i == 0 || i == -1) {
                break;
            }
            buffer.flip();
            outC.write(buffer);
            buffer.clear();
        }
        fis.close();
        return baos.toByteArray();
    }

}
